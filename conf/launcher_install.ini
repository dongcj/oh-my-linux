#!/usr/bin/env bash
#
# Author: dongcj <ntwk@163.com>
# description: 此文件定义每个阶段执行的函数及其顺序
# ++ 此框架中步骤类似WORD中的目录，暂时只支持二级目录
# 如[local_prepare]
#   - 对应的脚本名为local_prepare.sh
#   - 对应的函数名为local_prepare.fun
#   - 对应的日志名为local_prepare.log
#   - 对应的运行时为local_prepare.run
#   - 对应的成功名为local_prepare.succ
#   - 对应的失败名为local_prepare.failed

# 格式: [大步骤]
# 格式: Meta
# 格式: FUNCTION_Alias|FUNCTION_WITH_ARGS|TIMEOUT(second)|DESCRIPTION"

# Timeout时间单位为秒, 0表示不限时长


# install step:
# Select storage option => Assign roles to nodes => Install mon => Allocate disks => Install OSD => (Install MDS)

    
# Welcome, versions and first insight
[welcome]
    TIMELIMIT=0
    OUTKEYS="KEY1|KEY2
    
    Check_If_Dialog="0|"           
    Server_Info=60          
    Save_Conf=10   
    
    
# Check the container of firstbox(not ceph mon & osd machine)
[precheck]
    # these two are the Metadata for this chapter
    # limit total time for this chapter
    TIMELIMIT="2000"
    # if this chapter run over, the follow variable will generated in precheck.run
    OUTKEYS="KEY1 KEY2"
    # description
    DESCRIPTION="Precheck the server enviorment"
    
    # check the install ENV
    Check_ENV=

    # these are the first-class functions for the chapter
    Show_Vervion="10|This is the description for Show_Welcome"

    StraightTo_Last_Install="100|This is the description for StraightTo_Last_Install"

    
# deploy firstbox for install
[firstbox]
    TIMELIMIT=2000
    OUTKEYS="KEY1|KEY2"

    Check_env="80|"         
    Install_PSSH="20|"      
    Install_Dialog="20|"        

    

# ask user install information
[dialog]
    TIMELIMIT=0
    OUTKEYS="KEY1|KEY2
    Check_If_Dialog="0|"           
    Server_Info=60          
    Save_Conf=10
    
    # 自动计算服务器MON/MDS/OSD
    Auto_Calc_Rule="10"
    
    
    
# Linux Setting & tunning
[preinstall]
    TIMELIMIT=2000
    OUTKEYS="KEY1|KEY2"

    Test_Ping="$ALLSERVER|100|Ping all the server"
    SSH_Through="$THIS_RUN|200|SSH key auth"
    SCP_Files="$ALLSERVER|1000|Copy files"
    
    # install rpm, python tools, net-tools, or other third tools 
    Install_Basic_Soft="$ALLSERVER|1000|Copy files"
    
    # TODO: banner & figlet & alias AI=${BASE_DIR} setting here 
    Set_Hosts="100|"
    Check_OS="7|50|check the redhat release"
   
    
    Get_HostInfo="100|"
    Prompt_HostInfo="10|prompt hostinfo"
    


    # TODO: 需要确认bond能绑定的网卡数目(lspci)
    # 这个做成单独的脚本，可以实现动态的绑定实现，后续如果更改硬件，只需要运行一下即可
    # 如果是千M+万M网卡
        # 所有的千M修改为pubx, 并bond为bond_pub
        # 所有的万M修改为clux, 并bond为bond_clu
        
    # 如果是千M+万M网卡
        # 所有的千M修改为pubx, 并bond为bond_pub
        # 所有的万M修改为clux, 并bond为bond_clu
    #    
    Network_CheckDevice="200"
    
    Network_ChangeDevice="100|"  
    # later
    Network_Bonding="100|" 
    # 需要做一个脚本能发现新增的网卡, 并加入bond组中, 这个可以参考changeDevice
    Update_Bonding="100|"

    Config_System="300"
    Repo_Create="200"


# Ceph setting & install
[install]
    TIMELIMIT=2000
    OUTKEYS="KEY1|KEY2"
    
    # if user not ceph, create the user; if ceph; do nothing
    Ceph_User_Create="50"
    
    Ceph_MON_Install="500"
    Ceph_Package_Install="500"
    Ceph_OSD_Install="500"
    Ceph_MDS_Install="500"


# setting & install after ceph install success
[postinstall]
    TIMELIMIT=2000
    OUTKEYS="KEY1|KEY2"
    
    Ceph_WebMon_Install="500"
    Ceph_Service_Control=
    Ceph_Alert_Install="500"
    
    
# check all, if service running, all done
[postcheck]
    TIMELIMIT=2000
    Ceph_Install_Check="500"
    
    
    
# alert user how to use this program
[alertuser]
    TIMELIMIT=2000
    Ceph_Install_Check="500"
    
    
    
    

    